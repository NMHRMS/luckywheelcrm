// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.Property<Guid>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BranchID");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Contact")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("BranchId")
                        .HasName("PK_Branches");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches", null, t =>
                        {
                            t.HasTrigger("trg_UpdateDate_Branches");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Models.CallRecord", b =>
                {
                    b.Property<Guid>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CallRecordID");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<TimeOnly?>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LeadID");

                    b.Property<byte[]>("Recordings")
                        .HasMaxLength(100)
                        .HasColumnType("binary(100)")
                        .IsFixedLength();

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.HasKey("RecordId")
                        .HasName("PK_CallRecords");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("CallRecords");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.HasKey("CategoryId")
                        .HasName("PK_Categories");

                    b.HasIndex("CompanyId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CompanyContact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EmailID");

                    b.Property<string>("MobileNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyId")
                        .HasName("PK_Companies");

                    b.ToTable("Companies", null, t =>
                        {
                            t.HasTrigger("trg_UpdateDate_Companies");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Models.District", b =>
                {
                    b.Property<Guid>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DistrictID");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StateID");

                    b.HasKey("DistrictId")
                        .HasName("PK_Districts");

                    b.HasIndex("StateId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Domain.Models.Lead", b =>
                {
                    b.Property<Guid>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LeadID");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ChasisNo")
                        .HasColumnType("int");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentVehicle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExcelName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FatherName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LeadSource")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LeadType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ModelName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Not Called");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("LeadId")
                        .HasName("PK_Leads");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProductId");

                    b.ToTable("Leads", null, t =>
                        {
                            t.HasTrigger("trg_UpdateDate_Leads");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Models.LeadReview", b =>
                {
                    b.Property<Guid>("LeadReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LeadReviewID");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LeadID");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("LeadReviewId")
                        .HasName("PK_LeadsReview");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadsReview", null, t =>
                        {
                            t.HasTrigger("trg_UpdateDate_LeadsReview");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Models.LeadSource", b =>
                {
                    b.Property<Guid>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SourceID");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SourceId")
                        .HasName("PK_LeadSources");

                    b.HasIndex("CompanyId");

                    b.ToTable("LeadSources");
                });

            modelBuilder.Entity("Domain.Models.LeadTracking", b =>
                {
                    b.Property<Guid>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AssignedTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrackId")
                        .HasName("PK_LeadsTracking");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadsTracking", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("ProductId")
                        .HasName("PK_Products");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Products", null, t =>
                        {
                            t.HasTrigger("trg_UpdateDate_Products");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleID");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("RoleId")
                        .HasName("PK_Roles");

                    b.HasIndex("CompanyId");

                    b.ToTable("Roles", null, t =>
                        {
                            t.HasTrigger("trg_UpdateDate_Roles");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Models.State", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StateID");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StateId")
                        .HasName("PK_States");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserID");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BranchID");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryID");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("EmailID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleID");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK_Users");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasTrigger("trg_UpdateDate_Users");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Models.VehicleInOutRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ID");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BranchID");

                    b.Property<Guid>("CheckInBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<byte[]>("CheckInImage")
                        .HasColumnType("varbinary(MAX)");

                    b.Property<string>("CheckInReason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("CheckOutBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("DATETIME");

                    b.Property<byte[]>("CheckOutImage")
                        .HasColumnType("varbinary(MAX)");

                    b.Property<string>("CheckOutRemark")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("VehicleNo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id")
                        .HasName("PK_VehicleCheckInCheckOut");

                    b.HasIndex("BranchId");

                    b.HasIndex("CheckInBy");

                    b.HasIndex("CheckOutBy");

                    b.HasIndex("CompanyId");

                    b.ToTable("VehicleCheckInCheckOut", null, t =>
                        {
                            t.HasTrigger("trg_SetCheckOutDate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("UserAssignmentMappings", b =>
                {
                    b.Property<Guid>("AssigneeUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssigneeUserId", "AssignerUserId");

                    b.HasIndex("AssignerUserId");

                    b.ToTable("UserAssignmentMappings");
                });

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Models.CallRecord", b =>
                {
                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("CallRecords")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CallRecords_Companies");

                    b.HasOne("Domain.Models.Lead", "Lead")
                        .WithMany("CallRecords")
                        .HasForeignKey("LeadId")
                        .IsRequired()
                        .HasConstraintName("FK_CallRecords_Leads");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("CallRecords")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CallRecords_Users");

                    b.Navigation("Company");

                    b.Navigation("Lead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("Categories")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Categories_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Models.District", b =>
                {
                    b.HasOne("Domain.Models.State", "State")
                        .WithMany("Districts")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Districts_States");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Domain.Models.Lead", b =>
                {
                    b.HasOne("Domain.Models.User", "AssignedToUser")
                        .WithMany("Leads")
                        .HasForeignKey("AssignedTo")
                        .HasConstraintName("FK_Leads_Users");

                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("Leads")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Leads_Companies");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("Leads")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Leads_Products");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Company");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.LeadReview", b =>
                {
                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("LeadsReview")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_LeadsReview_Companies");

                    b.HasOne("Domain.Models.Lead", "Lead")
                        .WithMany("LeadsReview")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Domain.Models.LeadSource", b =>
                {
                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("LeadSources")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LeadSources_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Models.LeadTracking", b =>
                {
                    b.HasOne("Domain.Models.User", "AssignedByUser")
                        .WithMany("AssignedByLeadTrackings")
                        .HasForeignKey("AssignedBy")
                        .IsRequired()
                        .HasConstraintName("FK_LeadsTracking_Users1");

                    b.HasOne("Domain.Models.User", "AssignedToUser")
                        .WithMany("AssignedToLeadTrackings")
                        .HasForeignKey("AssignedTo")
                        .IsRequired()
                        .HasConstraintName("FK_LeadsTracking_Users");

                    b.HasOne("Domain.Models.Lead", "Lead")
                        .WithMany("LeadTrackings")
                        .HasForeignKey("LeadId")
                        .IsRequired()
                        .HasConstraintName("FK_LeadsTracking_Leads");

                    b.Navigation("AssignedByUser");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Categories");

                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Products_Companies");

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Roles_Companies");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_Users_Branches");

                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Companies");

                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Categories");

                    b.HasOne("Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Roles");

                    b.Navigation("Branch");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.VehicleInOutRecord", b =>
                {
                    b.HasOne("Domain.Models.Branch", "Branch")
                        .WithMany("VehicleCheckInCheckOut")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_VehicleCheckInCheckOut_Branches");

                    b.HasOne("Domain.Models.User", "CheckInUser")
                        .WithMany("VehicleCheckInCheckOut")
                        .HasForeignKey("CheckInBy")
                        .IsRequired()
                        .HasConstraintName("FK_VehicleCheckInCheckOut_Users");

                    b.HasOne("Domain.Models.User", "CheckOutUser")
                        .WithMany()
                        .HasForeignKey("CheckOutBy")
                        .HasConstraintName("FK_VehicleCheckInCheckOut_Users1");

                    b.HasOne("Domain.Models.Company", "Company")
                        .WithMany("VehicleCheckInCheckOut")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_VehicleCheckInCheckOut_Companies");

                    b.Navigation("Branch");

                    b.Navigation("CheckInUser");

                    b.Navigation("CheckOutUser");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("UserAssignmentMappings", b =>
                {
                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("AssigneeUserId")
                        .IsRequired();

                    b.HasOne("Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("AssignerUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Branch", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("VehicleCheckInCheckOut");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Company", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("CallRecords");

                    b.Navigation("Categories");

                    b.Navigation("LeadSources");

                    b.Navigation("Leads");

                    b.Navigation("LeadsReview");

                    b.Navigation("Products");

                    b.Navigation("Roles");

                    b.Navigation("Users");

                    b.Navigation("VehicleCheckInCheckOut");
                });

            modelBuilder.Entity("Domain.Models.Lead", b =>
                {
                    b.Navigation("CallRecords");

                    b.Navigation("LeadTrackings");

                    b.Navigation("LeadsReview");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.State", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("AssignedByLeadTrackings");

                    b.Navigation("AssignedToLeadTrackings");

                    b.Navigation("CallRecords");

                    b.Navigation("Leads");

                    b.Navigation("VehicleCheckInCheckOut");
                });
#pragma warning restore 612, 618
        }
    }
}
